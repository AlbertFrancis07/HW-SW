/*  fft.c - Fixed-point Fast Fourier Transform  */
/*
    fix_fft()       perform FFT or inverse FFT
    fix_mpy()       perform fixed-point multiplication.
    Sinewave[1024]  sinewave normalized to 32767 (= 1.0).
    
    All data are fixed-point short integers, in which
    -32768 to +32768 represent -1.0 to +1.0. Integer arithmetic
    is used for speed, instead of the more natural floating-point.
	
    For the forward FFT (time -> freq), fixed scaling is
    performed to prevent arithmetic overflow, and to map a 0dB
    sine/cosine wave (i.e. amplitude = 32767) to two -6dB freq
    coefficients; the one in the lower half is reported as 0dB.
    
    For the inverse FFT (freq -> time), fixed scaling cannot be
    done, as two 0dB coefficients would sum to a peak amplitude of
    64K, overflowing the 32k range of the fixed-point integers.
    Thus, the fix_fft() routine performs variable scaling, and
    returns a value which is the number of bits LEFT by which
    the output must be shifted to get the actual amplitude
    (i.e. if fix_fft() returns 3, each value of fr[] and fi[]
    must be multiplied by 8 (2^3) for proper scaling.
    Clearly, this cannot be done within the fixed-point short
    integers. In practice, if the result is to be used as a
    filter, the scale_shift can usually be ignored, as the
    result will be approximately correctly normalized as is.


    Source Code taken by http://www.jjj.de/crs4: integer_fft.c
    Last Modified by Sebastian Haas at Oct. 2014.
*/

#include "fft.h"



#define SHUFFLE 0
#define REVERSE_SHUFFLE 1


#define UPPER 1
#define LOWER 0


/*
 *	fix_fft() - perform fast Fourier transform.
 *
 *  if n>0 FFT is done, if n<0 inverse FFT is done
 *	fr[n],fi[n] are real,imaginary arrays, INPUT AND RESULT.
 *	size of data = 2^m
 *  set inverse to 0=dft, 1=idft
 */
int fix_fft(fixed fr[], fixed fi[], int m, int inverse)
{
    int mr,nn,i,j,l,k,istep, n, scale, shift;
    
    fixed qr,qi;		//even input
    fixed tr,ti;		//odd input
    fixed wr,wi;		//twiddle factor
    
    //number of input data
    n = 1<<m;
    int size=m;

    if(n > N_WAVE) return -1;

    mr = 0;
    nn = n - 1;
    scale = 0;

    /* decimation in time - re-order data */
    for(m=1; m<=nn; ++m) {

        mr = BIT_REVERSE(m,size);

        if(mr <= m) continue;
        tr = fr[m];
        fr[m] = fr[mr];
        fr[mr] = tr;
        
        ti = fi[m];
        fi[m] = fi[mr];
        fi[mr] = ti;
    }
	
    
    l = 1;
    k = LOG2_N_WAVE-1;
    while(l < n)
    {
        if(inverse)
        {
            /* variable scaling, depending upon data */
            shift = 0;
            for(i=0; i<n; i=i+8)
            {
                reg8x16 j_reg =FFT_SIMD_LOAD(fr,i);
                reg8x16 m_reg =FFT_SIMD_LOAD(fi,i);
                
                if(SHIFT_CONDITION(j_reg,m_reg))
                {
                    shift = 1;
                    break;
                }
            }
            if(shift) ++scale;
        }
        else
        {

            shift = 1;
        }
        
        if (l==1)
        {
            for(i=0;i<n;i=i+8)
            {
                k=LOG2_N_WAVE-1;

                real=SIMD_LOAD(fr,i);
                imag=SIMD_LOAD(fi,i);

                DIT_FIRST_STAGE(k, inverse, shift, real, imag);
                --k;
                DIT_SECOND_STAGE(k, inverse, shift, real, imag);
                --k;
                DIT_THIRD_STAGE(k, inverse, shift, real, imag);

                SIMD_STORE_SHUFFLED(fr, i, real, REVERSE_SHUFFLE);
                SIMD_STORE_SHUFFLED(fi, i, imag, REVERSE_SHUFFLE);

            }
        
            l=4;
        }
        else { // Stages greater than 3
        	
        	register reg8x16 real_1, imag_1, real_2, imag_2;
        	
        	WUR_REG_K(k);
        	
        	for (i=0; i<n; i = i+2*l)
        	{
	        	for (m = i; m<l+i; m+=8)
	        	{
	        		// Load Values
					SIMD_LOAD_INTERLEAVED(fr, m, real_1, real_2, UPPER);
					SIMD_LOAD_INTERLEAVED(fi, m, imag_1, imag_2, UPPER);
					
					SIMD_LOAD_INTERLEAVED(fr, m+l, real_1, real_2, LOWER);
					SIMD_LOAD_INTERLEAVED(fi, m+l, imag_1, imag_2, LOWER);
	
					// Do the actual calculation
					DIT_CALC_STAGE(real_1, imag_1, shift, m, inverse);
					DIT_CALC_STAGE(real_2, imag_2, shift, m+4, inverse);
					
					// Store Values
					SIMD_STORE_INTERLEAVED(fr, m, real_1, real_2, UPPER);
					SIMD_STORE_INTERLEAVED(fi, m, imag_1, imag_2, UPPER);
					
					SIMD_STORE_INTERLEAVED(fr, m+l, real_1, real_2, LOWER);
					SIMD_STORE_INTERLEAVED(fi, m+l, imag_1, imag_2, LOWER);
	        	}
        	}
        }           
        
        
        --k;
        l <<=1;
    }

    return scale;
}
