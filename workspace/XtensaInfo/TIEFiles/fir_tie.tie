


format fir_flix 64 {fir_slot0, fir_slot1, fir_slot2}
slot_opcodes fir_slot0 {FIR_LD}
slot_opcodes fir_slot1 {NOP}
slot_opcodes fir_slot2 {FIR_CALC_ST}


/*
 * MAC
 */
operation FIR_MAC {inout AR acc, in AR a, in AR b}{}
{
	wire [31:0] product = TIEmul(a[15:0],b[15:0],1'b1); // signed multiplication
	assign acc = acc + product;         // accumulation
}


/*
 * SIMD
 */
regfile VR_fir 128 8 vrf

operation FIR_MAC_SIMD {out AR acc, in VR_fir a, in VR_fir b}{}
{
	// 8x signed multiplications
	wire [31:0] product0 = TIEmul(a[127:112],b[15:0],1'b1);
	wire [31:0] product1 = TIEmul(a[111:96],b[31:16],1'b1);
	wire [31:0] product2 = TIEmul(a[95:80],b[47:32],1'b1);
	wire [31:0] product3 = TIEmul(a[79:64],b[63:48],1'b1);
	wire [31:0] product4 = TIEmul(a[63:48],b[79:64],1'b1);
	wire [31:0] product5 = TIEmul(a[47:32],b[95:80],1'b1);
	wire [31:0] product6 = TIEmul(a[31:16],b[111:96],1'b1);
	wire [31:0] product7 = TIEmul(a[15:0],b[127:112],1'b1);
	
	// addition of the 8 products
	assign acc = TIEaddn(product0,product1,product2,product3,product4,product5,product6,product7);
}


//schedule FIR_MAC_SIMD_SCHED {FIR_MAC_SIMD} {def acc 3;}


//-----------------------------------------
//advanced FIR


state shad_in128	128 add_read_write
state in128_1		128 add_read_write
state in128_2		128 add_read_write

state ptr_in		32 add_read_write
state ptr_out		32 add_read_write

table coeff 16 8 {-3, 4, -3, 2, 5, -1, 4, 8}


operation FIR_LD {}
			{out VAddr, in MemDataIn128, inout ptr_in,
				inout shad_in128, out in128_2}
{
	assign VAddr = ptr_in;
	assign ptr_in = ptr_in + 16;
	assign shad_in128 = MemDataIn128;
	assign in128_2 = shad_in128;
	
}

state product0		32
state product1		32
state product2		32
state product3		32
state product4		32
state product5		32
state product6		32
state product7		32

//disable first store
state st_cnt	1 add_read_write

operation FIR_CALC_ST {}
			{out VAddr, out MemDataOut32, out StoreByteDisable, inout ptr_out,
				inout in128_1, inout in128_2,
				inout st_cnt,
				inout product0, inout product1, inout product2, inout product3,
				inout product4, inout product5, inout product6, inout product7}
{
	
		
	assign product0 = TIEmul(in128_1[127:112], coeff[0], 1'b1);
	assign product1 = TIEmul(in128_1[111: 96], coeff[1], 1'b1);
	assign product2 = TIEmul(in128_1[ 95: 80], coeff[2], 1'b1);
	assign product3 = TIEmul(in128_1[ 79: 64], coeff[3], 1'b1);
	assign product4 = TIEmul(in128_1[ 63: 48], coeff[4], 1'b1);
	assign product5 = TIEmul(in128_1[ 47: 32], coeff[5], 1'b1);
	assign product6 = TIEmul(in128_1[ 31: 16], coeff[6], 1'b1);
	assign product7 = TIEmul(in128_1[ 15:  0], coeff[7], 1'b1);


	
	//assign in128_1 = {in128_1[15:0], in128_1[127:16]};
	assign in128_1 = {in128_2[15:0], in128_1[127:16]};
	assign in128_2 = {16'h0, in128_2[127:16]};
	
	assign VAddr = ptr_out;
	assign ptr_out = ptr_out + 4;
	
	assign ptr_out_kill = st_cnt;
	assign StoreByteDisable = {16{st_cnt}};
	assign st_cnt = 1'b0;
	
	// addition of the 8 products
	assign MemDataOut32 = TIEaddn(product0, product1, product2, product3,
									product4, product5, product6, product7);
	
}


